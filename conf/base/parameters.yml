
# parameters for modeling:

# set the time period and the equity ticker symbols you wish to pull
stock_pull_settings:
  equities: ['XLE', 'XLF', 'AAPL']
  start_date : '2019-01-01' # start date of the modeling period format: '2022-01-01'
  end_date : '2022-08-31' # end date of the modeling period format: '2022-01-01'

  sleep_min : 2 # minumum amount of sleep to take between pulls
  sleep_max : 10 # maximum amount of sleep to take between pulls
  expire_days : 3 # standard set of days until expiration of the cache - DO NOT ADJUST
  single_dataframe : True # whether to store all stocks into a single dataframe (recommended for Kedro functionality) - DO NOT ADJUST

moving_average_settings:
  stock_field : 'ticker'
  date_field : 'date'
  calculation_field : 'close'
  day_ranges :  [7, 14, 21]
  exponential: False # whether to return exponential moving averages 
  # calculation outputs:
  indicator_return_type: 'boolean_and_percentage' # takes boolean, percentage, boolean_and_percentage; input to the create_above_below_indicator_fields function

bollinger_band_settings:
  moving_average_used : 21 # must be one of the day ranges set in the moving average settings
  calculation_field : 'close' # need to reference the other dictionary in the definition statement 
  number_of_std : 2
  use_sma: True
  return_top_distance : True
  return_bottom_distance : True
  return_gap : True

target_classifier_settings:
  prediction_horizon: 20 # number of days out we want to classify (e.g., will the equity in question be higher x days from now)

modeling_settings:
  continuous_feature_cutoff : 0.6 
  drop_original_fields : True
  drop_stock_field: True # keep this fixed 
  test_size : 0.20
  seed : 1187
  cross_val_splits: 5
  optimization_target: 'train_true_positives'
  classifiers: {
                'Logistic_regression': {
                    'class_path': 'sklearn.linear_model.LogisticRegression',
                    'params': {'penalty': 'l2', 'C': 1.0, 'max_iter': 100000}
                },
                'Random_forest': {
                    'class_path': 'sklearn.ensemble.RandomForestClassifier',
                    'params': {'n_estimators': 200, 'criterion': 'gini', 'min_samples_split': 2, 'min_samples_leaf': 10, 'max_features': 'sqrt'}
                },
                'Support_vector_classifier': {
                    'class_path': 'sklearn.svm.SVC',
                    'params': {'C': 1.0, 'kernel': 'rbf', 'gamma': 'scale'}
                },
                'XGBoost': {
                    'class_path': 'xgboost.XGBClassifier',
                    'params': {'use_label_encoder': False, 'eval_metric': 'logloss'}
                },
                'K_nearest_neighbors': {
                    'class_path': 'sklearn.neighbors.KNeighborsClassifier',
                    'params': {'n_neighbors': 5, 'weights': 'uniform'}
                },
                'Gradient_boosting': {
                    'class_path': 'sklearn.ensemble.GradientBoostingClassifier',
                    'params': {'n_estimators': 100, 'learning_rate': 0.1, 'max_depth': 3}
                },
                'Naive_bayes': {
                    'class_path': 'sklearn.naive_bayes.GaussianNB',
                    'params': {}
                },
                'Balanced_random_forest': {
                    'class_path': 'imblearn.ensemble.BalancedRandomForestClassifier',
                    'params': {'n_estimators': 200, 'max_features': 'sqrt', 'sampling_strategy' : 'all', 'bootstrap' : False, 'replacement' : True}
                },
                'AdaBoost': {
                    'class_path': 'sklearn.ensemble.AdaBoostClassifier',
                    'params': {'n_estimators': 50, 'learning_rate': 1.0, 'algorithm' : 'SAMME'}
                },
                'CatBoost': {
                    'class_path': 'catboost.CatBoostClassifier',
                    'params': {'iterations': 100, 'learning_rate': 0.1, 'depth': 6, 'silent': True}
                }
  }
            

 
    


